"0",""
"0","ifnb <- IntegrateLayers(object = ifnb, method = CCAIntegration, orig.reduction = ""pca"", new.reduction = ""integrated.cca"","
"0","    verbose = FALSE)"
"1",""
"1"," "
"1"," |                                                  |"
"1"," "
"1","0 % ~calculating  "
"1",""
"1"," "
"1"," |++++++++++++++++++++++++++++++++++++++++++++++++++|"
"1"," "
"1","100% elapsed=01m 46s"
"1","
"
"0","# re-join layers after integration"
"0","ifnb[[""RNA""]] <- JoinLayers(ifnb[[""RNA""]])"
"0",""
"0","ifnb <- FindNeighbors(ifnb, reduction = ""integrated.cca"", dims = 1:30)"
"2","Computing nearest neighbor graph
"
"2","Computing SNN
"
"0","ifnb <- FindClusters(ifnb, resolution = 1)"
"1","Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck"
"1","
"
"1","
"
"1","Number of nodes: 13999
"
"1","Number of edges: 589215
"
"1","
"
"1","Running "
"1","Louvain algorithm"
"1","..."
"1","
"
"2","0%   10   20   30   40   50   60   70   80   90   100%
"
"2","[----|----|----|----|----|----|----|----|----|----|
"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","|
"
"1","Maximum modularity in 10 random starts: 0.8454
"
"1","Number of communities: 19
"
"1","Elapsed time: 2 seconds
"
"0","ifnb <- RunUMAP(ifnb, dims = 1:30, reduction = ""integrated.cca"")"
"2","20:15:34 UMAP embedding parameters a = 0.9922 b = 1.112
"
"2","20:15:34 Read 13999 rows and found 30 numeric columns
"
"2","20:15:34 Using Annoy for neighbor search, n_neighbors = 30
"
"2","20:15:34 Building Annoy index with metric = cosine, n_trees = 50
"
"2","0%   10   20   30   40   50   60   70   80   90   100%
"
"2","[----|----|----|----|----|----|----|----|----|----|
"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","|
"
"2","20:15:35 Writing NN index file to temp file /var/folders/1w/87nk652x54jbqqgtxs62tcw40000gn/T//RtmpSOcCab/file1845636206edd
"
"2","20:15:35 Searching Annoy index using 1 thread, search_k = 3000
"
"2","20:15:37 Annoy recall = 100%
"
"2","20:15:38 Commencing smooth kNN distance calibration using 1 thread"
"2"," with target n_neighbors = 30
"
"2","20:15:38 Initializing from normalized Laplacian + noise (using RSpectra)
"
"2","20:15:39 Commencing optimization for 200 epochs, with 629146 positive edges
"
"2","Using method '"
"2","umap"
"2","'"
"2","
"
"2","0%   10   20   30   40   50   60   70   80   90   100%
"
"2","[----|----|----|----|----|----|----|----|----|----|
"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","|
"
"2","20:15:48 Optimization finished
"
"0","DimPlot(ifnb, reduction = ""umap"", group.by = c(""stim"", ""seurat_annotations""))"
